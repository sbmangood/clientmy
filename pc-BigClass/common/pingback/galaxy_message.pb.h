// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: galaxy_message.proto

#ifndef PROTOBUF_INCLUDED_galaxy_5fmessage_2eproto
#define PROTOBUF_INCLUDED_galaxy_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_galaxy_5fmessage_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_galaxy_5fmessage_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_galaxy_5fmessage_2eproto();
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class LogEntry_BaseInfo;
class LogEntry_BaseInfoDefaultTypeInternal;
extern LogEntry_BaseInfoDefaultTypeInternal _LogEntry_BaseInfo_default_instance_;
class LogEntry_ExtraInfo;
class LogEntry_ExtraInfoDefaultTypeInternal;
extern LogEntry_ExtraInfoDefaultTypeInternal _LogEntry_ExtraInfo_default_instance_;
class LogEntry_LiveInfo;
class LogEntry_LiveInfoDefaultTypeInternal;
extern LogEntry_LiveInfoDefaultTypeInternal _LogEntry_LiveInfo_default_instance_;
namespace google {
namespace protobuf {
template<> ::LogEntry* Arena::CreateMaybeMessage<::LogEntry>(Arena*);
template<> ::LogEntry_BaseInfo* Arena::CreateMaybeMessage<::LogEntry_BaseInfo>(Arena*);
template<> ::LogEntry_ExtraInfo* Arena::CreateMaybeMessage<::LogEntry_ExtraInfo>(Arena*);
template<> ::LogEntry_LiveInfo* Arena::CreateMaybeMessage<::LogEntry_LiveInfo>(Arena*);
}  // namespace protobuf
}  // namespace google

enum LogEntry_Os {
  LogEntry_Os_OS_DEFAULT = 0,
  LogEntry_Os_PC = 1,
  LogEntry_Os_ANDROID = 2,
  LogEntry_Os_IOS = 3,
  LogEntry_Os_WEB = 4,
  LogEntry_Os_SERVER = 5,
  LogEntry_Os_BACKEND = 6,
  LogEntry_Os_LogEntry_Os_INT_MIN_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::min)(),
  LogEntry_Os_LogEntry_Os_INT_MAX_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::max)()
};
bool LogEntry_Os_IsValid(int value);
const LogEntry_Os LogEntry_Os_Os_MIN = LogEntry_Os_OS_DEFAULT;
const LogEntry_Os LogEntry_Os_Os_MAX = LogEntry_Os_BACKEND;
const int LogEntry_Os_Os_ARRAYSIZE = LogEntry_Os_Os_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEntry_Os_descriptor();
inline const ::std::string& LogEntry_Os_Name(LogEntry_Os value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEntry_Os_descriptor(), value);
}
inline bool LogEntry_Os_Parse(
    const ::std::string& name, LogEntry_Os* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEntry_Os>(
    LogEntry_Os_descriptor(), name, value);
}
enum LogEntry_UserType {
  LogEntry_UserType_USERTYPE_DEFAULT = 0,
  LogEntry_UserType_STU = 1,
  LogEntry_UserType_TEA = 2,
  LogEntry_UserType_CC = 3,
  LogEntry_UserType_CR = 4,
  LogEntry_UserType_AUDIT = 5,
  LogEntry_UserType_LogEntry_UserType_INT_MIN_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::min)(),
  LogEntry_UserType_LogEntry_UserType_INT_MAX_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::max)()
};
bool LogEntry_UserType_IsValid(int value);
const LogEntry_UserType LogEntry_UserType_UserType_MIN = LogEntry_UserType_USERTYPE_DEFAULT;
const LogEntry_UserType LogEntry_UserType_UserType_MAX = LogEntry_UserType_AUDIT;
const int LogEntry_UserType_UserType_ARRAYSIZE = LogEntry_UserType_UserType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEntry_UserType_descriptor();
inline const ::std::string& LogEntry_UserType_Name(LogEntry_UserType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEntry_UserType_descriptor(), value);
}
inline bool LogEntry_UserType_Parse(
    const ::std::string& name, LogEntry_UserType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEntry_UserType>(
    LogEntry_UserType_descriptor(), name, value);
}
enum LogEntry_LogType {
  LogEntry_LogType_LOGTYPE_DEFAULT = 0,
  LogEntry_LogType_CLICK = 1,
  LogEntry_LogType_PV = 2,
  LogEntry_LogType_HEARTBEAT = 3,
  LogEntry_LogType_APP = 4,
  LogEntry_LogType_REFRESH = 5,
  LogEntry_LogType_SEARCH = 6,
  LogEntry_LogType_LogEntry_LogType_INT_MIN_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::min)(),
  LogEntry_LogType_LogEntry_LogType_INT_MAX_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::max)()
};
bool LogEntry_LogType_IsValid(int value);
const LogEntry_LogType LogEntry_LogType_LogType_MIN = LogEntry_LogType_LOGTYPE_DEFAULT;
const LogEntry_LogType LogEntry_LogType_LogType_MAX = LogEntry_LogType_SEARCH;
const int LogEntry_LogType_LogType_ARRAYSIZE = LogEntry_LogType_LogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEntry_LogType_descriptor();
inline const ::std::string& LogEntry_LogType_Name(LogEntry_LogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEntry_LogType_descriptor(), value);
}
inline bool LogEntry_LogType_Parse(
    const ::std::string& name, LogEntry_LogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEntry_LogType>(
    LogEntry_LogType_descriptor(), name, value);
}
enum LogEntry_NetType {
  LogEntry_NetType_NETTYPE_DEFAULT = 0,
  LogEntry_NetType_G2 = 1,
  LogEntry_NetType_G3 = 2,
  LogEntry_NetType_G4 = 3,
  LogEntry_NetType_G5 = 4,
  LogEntry_NetType_WIFI = 5,
  LogEntry_NetType_CABLE = 6,
  LogEntry_NetType_NET_UNKNOW = 7,
  LogEntry_NetType_LogEntry_NetType_INT_MIN_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::min)(),
  LogEntry_NetType_LogEntry_NetType_INT_MAX_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::max)()
};
bool LogEntry_NetType_IsValid(int value);
const LogEntry_NetType LogEntry_NetType_NetType_MIN = LogEntry_NetType_NETTYPE_DEFAULT;
const LogEntry_NetType LogEntry_NetType_NetType_MAX = LogEntry_NetType_NET_UNKNOW;
const int LogEntry_NetType_NetType_ARRAYSIZE = LogEntry_NetType_NetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEntry_NetType_descriptor();
inline const ::std::string& LogEntry_NetType_Name(LogEntry_NetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEntry_NetType_descriptor(), value);
}
inline bool LogEntry_NetType_Parse(
    const ::std::string& name, LogEntry_NetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEntry_NetType>(
    LogEntry_NetType_descriptor(), name, value);
}
enum LogEntry_AppAction {
  LogEntry_AppAction_APPACTION_DEFAULT = 0,
  LogEntry_AppAction_OPEN = 1,
  LogEntry_AppAction_CRASH = 2,
  LogEntry_AppAction_EXIT = 3,
  LogEntry_AppAction_LogEntry_AppAction_INT_MIN_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::min)(),
  LogEntry_AppAction_LogEntry_AppAction_INT_MAX_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::max)()
};
bool LogEntry_AppAction_IsValid(int value);
const LogEntry_AppAction LogEntry_AppAction_AppAction_MIN = LogEntry_AppAction_APPACTION_DEFAULT;
const LogEntry_AppAction LogEntry_AppAction_AppAction_MAX = LogEntry_AppAction_EXIT;
const int LogEntry_AppAction_AppAction_ARRAYSIZE = LogEntry_AppAction_AppAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEntry_AppAction_descriptor();
inline const ::std::string& LogEntry_AppAction_Name(LogEntry_AppAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEntry_AppAction_descriptor(), value);
}
inline bool LogEntry_AppAction_Parse(
    const ::std::string& name, LogEntry_AppAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEntry_AppAction>(
    LogEntry_AppAction_descriptor(), name, value);
}
enum LogEntry_Company {
  LogEntry_Company_COMPANY_DEFAULT = 0,
  LogEntry_Company_YIMI = 1,
  LogEntry_Company_JUREN = 2,
  LogEntry_Company_LogEntry_Company_INT_MIN_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::min)(),
  LogEntry_Company_LogEntry_Company_INT_MAX_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::max)()
};
bool LogEntry_Company_IsValid(int value);
const LogEntry_Company LogEntry_Company_Company_MIN = LogEntry_Company_COMPANY_DEFAULT;
const LogEntry_Company LogEntry_Company_Company_MAX = LogEntry_Company_JUREN;
const int LogEntry_Company_Company_ARRAYSIZE = LogEntry_Company_Company_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEntry_Company_descriptor();
inline const ::std::string& LogEntry_Company_Name(LogEntry_Company value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEntry_Company_descriptor(), value);
}
inline bool LogEntry_Company_Parse(
    const ::std::string& name, LogEntry_Company* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEntry_Company>(
    LogEntry_Company_descriptor(), name, value);
}
enum LogEntry_OperatorType {
  LogEntry_OperatorType_OPERATORTYPE_DEFAULT = 0,
  LogEntry_OperatorType_UNICOM = 1,
  LogEntry_OperatorType_TELECOM = 2,
  LogEntry_OperatorType_MOBILE = 3,
  LogEntry_OperatorType_OPERATOR_UNKNOW = 4,
  LogEntry_OperatorType_LogEntry_OperatorType_INT_MIN_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::min)(),
  LogEntry_OperatorType_LogEntry_OperatorType_INT_MAX_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::max)()
};
bool LogEntry_OperatorType_IsValid(int value);
const LogEntry_OperatorType LogEntry_OperatorType_OperatorType_MIN = LogEntry_OperatorType_OPERATORTYPE_DEFAULT;
const LogEntry_OperatorType LogEntry_OperatorType_OperatorType_MAX = LogEntry_OperatorType_OPERATOR_UNKNOW;
const int LogEntry_OperatorType_OperatorType_ARRAYSIZE = LogEntry_OperatorType_OperatorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEntry_OperatorType_descriptor();
inline const ::std::string& LogEntry_OperatorType_Name(LogEntry_OperatorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEntry_OperatorType_descriptor(), value);
}
inline bool LogEntry_OperatorType_Parse(
    const ::std::string& name, LogEntry_OperatorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEntry_OperatorType>(
    LogEntry_OperatorType_descriptor(), name, value);
}
enum LogEntry_LessonType {
  LogEntry_LessonType_LESSONTYPE_DEFAULT = 0,
  LogEntry_LessonType_AUDITION = 1,
  LogEntry_LessonType_ORDER = 2,
  LogEntry_LessonType_AUDITION_U = 3,
  LogEntry_LessonType_AUDITION_N = 4,
  LogEntry_LessonType_LogEntry_LessonType_INT_MIN_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::min)(),
  LogEntry_LessonType_LogEntry_LessonType_INT_MAX_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::max)()
};
bool LogEntry_LessonType_IsValid(int value);
const LogEntry_LessonType LogEntry_LessonType_LessonType_MIN = LogEntry_LessonType_LESSONTYPE_DEFAULT;
const LogEntry_LessonType LogEntry_LessonType_LessonType_MAX = LogEntry_LessonType_AUDITION_N;
const int LogEntry_LessonType_LessonType_ARRAYSIZE = LogEntry_LessonType_LessonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEntry_LessonType_descriptor();
inline const ::std::string& LogEntry_LessonType_Name(LogEntry_LessonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEntry_LessonType_descriptor(), value);
}
inline bool LogEntry_LessonType_Parse(
    const ::std::string& name, LogEntry_LessonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEntry_LessonType>(
    LogEntry_LessonType_descriptor(), name, value);
}
enum LogEntry_SDKVersion {
  LogEntry_SDKVersion_SDKVERSION_DEFAULT = 0,
  LogEntry_SDKVersion_V100 = 1,
  LogEntry_SDKVersion_V101 = 2,
  LogEntry_SDKVersion_V102 = 3,
  LogEntry_SDKVersion_V103 = 4,
  LogEntry_SDKVersion_V104 = 5,
  LogEntry_SDKVersion_V105 = 6,
  LogEntry_SDKVersion_V106 = 7,
  LogEntry_SDKVersion_V107 = 8,
  LogEntry_SDKVersion_V108 = 9,
  LogEntry_SDKVersion_V109 = 10,
  LogEntry_SDKVersion_V110 = 11,
  LogEntry_SDKVersion_V111 = 12,
  LogEntry_SDKVersion_V112 = 13,
  LogEntry_SDKVersion_V113 = 14,
  LogEntry_SDKVersion_V114 = 15,
  LogEntry_SDKVersion_V115 = 16,
  LogEntry_SDKVersion_V116 = 17,
  LogEntry_SDKVersion_V117 = 18,
  LogEntry_SDKVersion_V118 = 19,
  LogEntry_SDKVersion_V119 = 20,
  LogEntry_SDKVersion_V120 = 21,
  LogEntry_SDKVersion_V121 = 22,
  LogEntry_SDKVersion_V122 = 23,
  LogEntry_SDKVersion_V123 = 24,
  LogEntry_SDKVersion_V124 = 25,
  LogEntry_SDKVersion_V125 = 26,
  LogEntry_SDKVersion_V126 = 27,
  LogEntry_SDKVersion_V127 = 28,
  LogEntry_SDKVersion_V128 = 29,
  LogEntry_SDKVersion_V129 = 30,
  LogEntry_SDKVersion_V130 = 31,
  LogEntry_SDKVersion_LogEntry_SDKVersion_INT_MIN_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::min)(),
  LogEntry_SDKVersion_LogEntry_SDKVersion_INT_MAX_SENTINEL_DO_NOT_USE_ = (std::numeric_limits<::google::protobuf::int32>::max)()
};
bool LogEntry_SDKVersion_IsValid(int value);
const LogEntry_SDKVersion LogEntry_SDKVersion_SDKVersion_MIN = LogEntry_SDKVersion_SDKVERSION_DEFAULT;
const LogEntry_SDKVersion LogEntry_SDKVersion_SDKVersion_MAX = LogEntry_SDKVersion_V130;
const int LogEntry_SDKVersion_SDKVersion_ARRAYSIZE = LogEntry_SDKVersion_SDKVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogEntry_SDKVersion_descriptor();
inline const ::std::string& LogEntry_SDKVersion_Name(LogEntry_SDKVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogEntry_SDKVersion_descriptor(), value);
}
inline bool LogEntry_SDKVersion_Parse(
    const ::std::string& name, LogEntry_SDKVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogEntry_SDKVersion>(
    LogEntry_SDKVersion_descriptor(), name, value);
}
// ===================================================================

class LogEntry_BaseInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LogEntry.BaseInfo) */ {
 public:
  LogEntry_BaseInfo();
  virtual ~LogEntry_BaseInfo();

  LogEntry_BaseInfo(const LogEntry_BaseInfo& from);

  inline LogEntry_BaseInfo& operator=(const LogEntry_BaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogEntry_BaseInfo(LogEntry_BaseInfo&& from) noexcept
    : LogEntry_BaseInfo() {
    *this = ::std::move(from);
  }

  inline LogEntry_BaseInfo& operator=(LogEntry_BaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogEntry_BaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry_BaseInfo* internal_default_instance() {
    return reinterpret_cast<const LogEntry_BaseInfo*>(
               &_LogEntry_BaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogEntry_BaseInfo* other);
  friend void swap(LogEntry_BaseInfo& a, LogEntry_BaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogEntry_BaseInfo* New() const final {
    return CreateMaybeMessage<LogEntry_BaseInfo>(nullptr);
  }

  LogEntry_BaseInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry_BaseInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogEntry_BaseInfo& from);
  void MergeFrom(const LogEntry_BaseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry_BaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sessionId = 3;
  void clear_sessionid();
  static const int kSessionIdFieldNumber = 3;
  const ::std::string& sessionid() const;
  void set_sessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionid(::std::string&& value);
  #endif
  void set_sessionid(const char* value);
  void set_sessionid(const char* value, size_t size);
  ::std::string* mutable_sessionid();
  ::std::string* release_sessionid();
  void set_allocated_sessionid(::std::string* sessionid);

  // string uuid = 4;
  void clear_uuid();
  static const int kUuidFieldNumber = 4;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string userId = 7;
  void clear_userid();
  static const int kUserIdFieldNumber = 7;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string eventId = 10;
  void clear_eventid();
  static const int kEventIdFieldNumber = 10;
  const ::std::string& eventid() const;
  void set_eventid(const ::std::string& value);
  #if LANG_CXX11
  void set_eventid(::std::string&& value);
  #endif
  void set_eventid(const char* value);
  void set_eventid(const char* value, size_t size);
  ::std::string* mutable_eventid();
  ::std::string* release_eventid();
  void set_allocated_eventid(::std::string* eventid);

  // string business = 14;
  void clear_business();
  static const int kBusinessFieldNumber = 14;
  const ::std::string& business() const;
  void set_business(const ::std::string& value);
  #if LANG_CXX11
  void set_business(::std::string&& value);
  #endif
  void set_business(const char* value);
  void set_business(const char* value, size_t size);
  ::std::string* mutable_business();
  ::std::string* release_business();
  void set_allocated_business(::std::string* business);

  // string channel = 16;
  void clear_channel();
  static const int kChannelFieldNumber = 16;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // string appVersion = 17;
  void clear_appversion();
  static const int kAppVersionFieldNumber = 17;
  const ::std::string& appversion() const;
  void set_appversion(const ::std::string& value);
  #if LANG_CXX11
  void set_appversion(::std::string&& value);
  #endif
  void set_appversion(const char* value);
  void set_appversion(const char* value, size_t size);
  ::std::string* mutable_appversion();
  ::std::string* release_appversion();
  void set_allocated_appversion(::std::string* appversion);

  // string appType = 18;
  void clear_apptype();
  static const int kAppTypeFieldNumber = 18;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const char* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // string deviceInfo = 19;
  void clear_deviceinfo();
  static const int kDeviceInfoFieldNumber = 19;
  const ::std::string& deviceinfo() const;
  void set_deviceinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceinfo(::std::string&& value);
  #endif
  void set_deviceinfo(const char* value);
  void set_deviceinfo(const char* value, size_t size);
  ::std::string* mutable_deviceinfo();
  ::std::string* release_deviceinfo();
  void set_allocated_deviceinfo(::std::string* deviceinfo);

  // string osVersion = 20;
  void clear_osversion();
  static const int kOsVersionFieldNumber = 20;
  const ::std::string& osversion() const;
  void set_osversion(const ::std::string& value);
  #if LANG_CXX11
  void set_osversion(::std::string&& value);
  #endif
  void set_osversion(const char* value);
  void set_osversion(const char* value, size_t size);
  ::std::string* mutable_osversion();
  ::std::string* release_osversion();
  void set_allocated_osversion(::std::string* osversion);

  // string info = 22;
  void clear_info();
  static const int kInfoFieldNumber = 22;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // int64 sysTime = 1;
  void clear_systime();
  static const int kSysTimeFieldNumber = 1;
  ::google::protobuf::int64 systime() const;
  void set_systime(::google::protobuf::int64 value);

  // int64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // .LogEntry.Company company = 5;
  void clear_company();
  static const int kCompanyFieldNumber = 5;
  ::LogEntry_Company company() const;
  void set_company(::LogEntry_Company value);

  // .LogEntry.SDKVersion sdkVersion = 6;
  void clear_sdkversion();
  static const int kSdkVersionFieldNumber = 6;
  ::LogEntry_SDKVersion sdkversion() const;
  void set_sdkversion(::LogEntry_SDKVersion value);

  // .LogEntry.UserType userType = 8;
  void clear_usertype();
  static const int kUserTypeFieldNumber = 8;
  ::LogEntry_UserType usertype() const;
  void set_usertype(::LogEntry_UserType value);

  // .LogEntry.LogType type = 9;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::LogEntry_LogType type() const;
  void set_type(::LogEntry_LogType value);

  // .LogEntry.NetType netType = 11;
  void clear_nettype();
  static const int kNetTypeFieldNumber = 11;
  ::LogEntry_NetType nettype() const;
  void set_nettype(::LogEntry_NetType value);

  // .LogEntry.OperatorType operatorType = 12;
  void clear_operatortype();
  static const int kOperatorTypeFieldNumber = 12;
  ::LogEntry_OperatorType operatortype() const;
  void set_operatortype(::LogEntry_OperatorType value);

  // int32 requestCnt = 13;
  void clear_requestcnt();
  static const int kRequestCntFieldNumber = 13;
  ::google::protobuf::int32 requestcnt() const;
  void set_requestcnt(::google::protobuf::int32 value);

  // .LogEntry.Os os = 15;
  void clear_os();
  static const int kOsFieldNumber = 15;
  ::LogEntry_Os os() const;
  void set_os(::LogEntry_Os value);

  // int64 stayTime = 23;
  void clear_staytime();
  static const int kStayTimeFieldNumber = 23;
  ::google::protobuf::int64 staytime() const;
  void set_staytime(::google::protobuf::int64 value);

  // .LogEntry.AppAction appAction = 21;
  void clear_appaction();
  static const int kAppActionFieldNumber = 21;
  ::LogEntry_AppAction appaction() const;
  void set_appaction(::LogEntry_AppAction value);

  // @@protoc_insertion_point(class_scope:LogEntry.BaseInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr eventid_;
  ::google::protobuf::internal::ArenaStringPtr business_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr appversion_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::internal::ArenaStringPtr deviceinfo_;
  ::google::protobuf::internal::ArenaStringPtr osversion_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::int64 systime_;
  ::google::protobuf::int64 time_;
  int company_;
  int sdkversion_;
  int usertype_;
  int type_;
  int nettype_;
  int operatortype_;
  ::google::protobuf::int32 requestcnt_;
  int os_;
  ::google::protobuf::int64 staytime_;
  int appaction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_galaxy_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class LogEntry_LiveInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LogEntry.LiveInfo) */ {
 public:
  LogEntry_LiveInfo();
  virtual ~LogEntry_LiveInfo();

  LogEntry_LiveInfo(const LogEntry_LiveInfo& from);

  inline LogEntry_LiveInfo& operator=(const LogEntry_LiveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogEntry_LiveInfo(LogEntry_LiveInfo&& from) noexcept
    : LogEntry_LiveInfo() {
    *this = ::std::move(from);
  }

  inline LogEntry_LiveInfo& operator=(LogEntry_LiveInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogEntry_LiveInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry_LiveInfo* internal_default_instance() {
    return reinterpret_cast<const LogEntry_LiveInfo*>(
               &_LogEntry_LiveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LogEntry_LiveInfo* other);
  friend void swap(LogEntry_LiveInfo& a, LogEntry_LiveInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogEntry_LiveInfo* New() const final {
    return CreateMaybeMessage<LogEntry_LiveInfo>(nullptr);
  }

  LogEntry_LiveInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry_LiveInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogEntry_LiveInfo& from);
  void MergeFrom(const LogEntry_LiveInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry_LiveInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string lessonId = 1;
  void clear_lessonid();
  static const int kLessonIdFieldNumber = 1;
  const ::std::string& lessonid() const;
  void set_lessonid(const ::std::string& value);
  #if LANG_CXX11
  void set_lessonid(::std::string&& value);
  #endif
  void set_lessonid(const char* value);
  void set_lessonid(const char* value, size_t size);
  ::std::string* mutable_lessonid();
  ::std::string* release_lessonid();
  void set_allocated_lessonid(::std::string* lessonid);

  // string serverIp = 3;
  void clear_serverip();
  static const int kServerIpFieldNumber = 3;
  const ::std::string& serverip() const;
  void set_serverip(const ::std::string& value);
  #if LANG_CXX11
  void set_serverip(::std::string&& value);
  #endif
  void set_serverip(const char* value);
  void set_serverip(const char* value, size_t size);
  ::std::string* mutable_serverip();
  ::std::string* release_serverip();
  void set_allocated_serverip(::std::string* serverip);

  // string userIp = 4;
  void clear_userip();
  static const int kUserIpFieldNumber = 4;
  const ::std::string& userip() const;
  void set_userip(const ::std::string& value);
  #if LANG_CXX11
  void set_userip(::std::string&& value);
  #endif
  void set_userip(const char* value);
  void set_userip(const char* value, size_t size);
  ::std::string* mutable_userip();
  ::std::string* release_userip();
  void set_allocated_userip(::std::string* userip);

  // .LogEntry.LessonType lessonType = 2;
  void clear_lessontype();
  static const int kLessonTypeFieldNumber = 2;
  ::LogEntry_LessonType lessontype() const;
  void set_lessontype(::LogEntry_LessonType value);

  // @@protoc_insertion_point(class_scope:LogEntry.LiveInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr lessonid_;
  ::google::protobuf::internal::ArenaStringPtr serverip_;
  ::google::protobuf::internal::ArenaStringPtr userip_;
  int lessontype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_galaxy_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class LogEntry_ExtraInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LogEntry.ExtraInfo) */ {
 public:
  LogEntry_ExtraInfo();
  virtual ~LogEntry_ExtraInfo();

  LogEntry_ExtraInfo(const LogEntry_ExtraInfo& from);

  inline LogEntry_ExtraInfo& operator=(const LogEntry_ExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogEntry_ExtraInfo(LogEntry_ExtraInfo&& from) noexcept
    : LogEntry_ExtraInfo() {
    *this = ::std::move(from);
  }

  inline LogEntry_ExtraInfo& operator=(LogEntry_ExtraInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogEntry_ExtraInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry_ExtraInfo* internal_default_instance() {
    return reinterpret_cast<const LogEntry_ExtraInfo*>(
               &_LogEntry_ExtraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LogEntry_ExtraInfo* other);
  friend void swap(LogEntry_ExtraInfo& a, LogEntry_ExtraInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogEntry_ExtraInfo* New() const final {
    return CreateMaybeMessage<LogEntry_ExtraInfo>(nullptr);
  }

  LogEntry_ExtraInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry_ExtraInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogEntry_ExtraInfo& from);
  void MergeFrom(const LogEntry_ExtraInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry_ExtraInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:LogEntry.ExtraInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_galaxy_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class LogEntry :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LogEntry) */ {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LogEntry* other);
  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogEntry_BaseInfo BaseInfo;
  typedef LogEntry_LiveInfo LiveInfo;
  typedef LogEntry_ExtraInfo ExtraInfo;

  typedef LogEntry_Os Os;
  static const Os OS_DEFAULT =
    LogEntry_Os_OS_DEFAULT;
  static const Os PC =
    LogEntry_Os_PC;
  static const Os ANDROID =
    LogEntry_Os_ANDROID;
  static const Os IOS =
    LogEntry_Os_IOS;
  static const Os WEB =
    LogEntry_Os_WEB;
  static const Os SERVER =
    LogEntry_Os_SERVER;
  static const Os BACKEND =
    LogEntry_Os_BACKEND;
  static inline bool Os_IsValid(int value) {
    return LogEntry_Os_IsValid(value);
  }
  static const Os Os_MIN =
    LogEntry_Os_Os_MIN;
  static const Os Os_MAX =
    LogEntry_Os_Os_MAX;
  static const int Os_ARRAYSIZE =
    LogEntry_Os_Os_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Os_descriptor() {
    return LogEntry_Os_descriptor();
  }
  static inline const ::std::string& Os_Name(Os value) {
    return LogEntry_Os_Name(value);
  }
  static inline bool Os_Parse(const ::std::string& name,
      Os* value) {
    return LogEntry_Os_Parse(name, value);
  }

  typedef LogEntry_UserType UserType;
  static const UserType USERTYPE_DEFAULT =
    LogEntry_UserType_USERTYPE_DEFAULT;
  static const UserType STU =
    LogEntry_UserType_STU;
  static const UserType TEA =
    LogEntry_UserType_TEA;
  static const UserType CC =
    LogEntry_UserType_CC;
  static const UserType CR =
    LogEntry_UserType_CR;
  static const UserType AUDIT =
    LogEntry_UserType_AUDIT;
  static inline bool UserType_IsValid(int value) {
    return LogEntry_UserType_IsValid(value);
  }
  static const UserType UserType_MIN =
    LogEntry_UserType_UserType_MIN;
  static const UserType UserType_MAX =
    LogEntry_UserType_UserType_MAX;
  static const int UserType_ARRAYSIZE =
    LogEntry_UserType_UserType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UserType_descriptor() {
    return LogEntry_UserType_descriptor();
  }
  static inline const ::std::string& UserType_Name(UserType value) {
    return LogEntry_UserType_Name(value);
  }
  static inline bool UserType_Parse(const ::std::string& name,
      UserType* value) {
    return LogEntry_UserType_Parse(name, value);
  }

  typedef LogEntry_LogType LogType;
  static const LogType LOGTYPE_DEFAULT =
    LogEntry_LogType_LOGTYPE_DEFAULT;
  static const LogType CLICK =
    LogEntry_LogType_CLICK;
  static const LogType PV =
    LogEntry_LogType_PV;
  static const LogType HEARTBEAT =
    LogEntry_LogType_HEARTBEAT;
  static const LogType APP =
    LogEntry_LogType_APP;
  static const LogType REFRESH =
    LogEntry_LogType_REFRESH;
  static const LogType SEARCH =
    LogEntry_LogType_SEARCH;
  static inline bool LogType_IsValid(int value) {
    return LogEntry_LogType_IsValid(value);
  }
  static const LogType LogType_MIN =
    LogEntry_LogType_LogType_MIN;
  static const LogType LogType_MAX =
    LogEntry_LogType_LogType_MAX;
  static const int LogType_ARRAYSIZE =
    LogEntry_LogType_LogType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LogType_descriptor() {
    return LogEntry_LogType_descriptor();
  }
  static inline const ::std::string& LogType_Name(LogType value) {
    return LogEntry_LogType_Name(value);
  }
  static inline bool LogType_Parse(const ::std::string& name,
      LogType* value) {
    return LogEntry_LogType_Parse(name, value);
  }

  typedef LogEntry_NetType NetType;
  static const NetType NETTYPE_DEFAULT =
    LogEntry_NetType_NETTYPE_DEFAULT;
  static const NetType G2 =
    LogEntry_NetType_G2;
  static const NetType G3 =
    LogEntry_NetType_G3;
  static const NetType G4 =
    LogEntry_NetType_G4;
  static const NetType G5 =
    LogEntry_NetType_G5;
  static const NetType WIFI =
    LogEntry_NetType_WIFI;
  static const NetType CABLE =
    LogEntry_NetType_CABLE;
  static const NetType NET_UNKNOW =
    LogEntry_NetType_NET_UNKNOW;
  static inline bool NetType_IsValid(int value) {
    return LogEntry_NetType_IsValid(value);
  }
  static const NetType NetType_MIN =
    LogEntry_NetType_NetType_MIN;
  static const NetType NetType_MAX =
    LogEntry_NetType_NetType_MAX;
  static const int NetType_ARRAYSIZE =
    LogEntry_NetType_NetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NetType_descriptor() {
    return LogEntry_NetType_descriptor();
  }
  static inline const ::std::string& NetType_Name(NetType value) {
    return LogEntry_NetType_Name(value);
  }
  static inline bool NetType_Parse(const ::std::string& name,
      NetType* value) {
    return LogEntry_NetType_Parse(name, value);
  }

  typedef LogEntry_AppAction AppAction;
  static const AppAction APPACTION_DEFAULT =
    LogEntry_AppAction_APPACTION_DEFAULT;
  static const AppAction OPEN =
    LogEntry_AppAction_OPEN;
  static const AppAction CRASH =
    LogEntry_AppAction_CRASH;
  static const AppAction EXIT =
    LogEntry_AppAction_EXIT;
  static inline bool AppAction_IsValid(int value) {
    return LogEntry_AppAction_IsValid(value);
  }
  static const AppAction AppAction_MIN =
    LogEntry_AppAction_AppAction_MIN;
  static const AppAction AppAction_MAX =
    LogEntry_AppAction_AppAction_MAX;
  static const int AppAction_ARRAYSIZE =
    LogEntry_AppAction_AppAction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AppAction_descriptor() {
    return LogEntry_AppAction_descriptor();
  }
  static inline const ::std::string& AppAction_Name(AppAction value) {
    return LogEntry_AppAction_Name(value);
  }
  static inline bool AppAction_Parse(const ::std::string& name,
      AppAction* value) {
    return LogEntry_AppAction_Parse(name, value);
  }

  typedef LogEntry_Company Company;
  static const Company COMPANY_DEFAULT =
    LogEntry_Company_COMPANY_DEFAULT;
  static const Company YIMI =
    LogEntry_Company_YIMI;
  static const Company JUREN =
    LogEntry_Company_JUREN;
  static inline bool Company_IsValid(int value) {
    return LogEntry_Company_IsValid(value);
  }
  static const Company Company_MIN =
    LogEntry_Company_Company_MIN;
  static const Company Company_MAX =
    LogEntry_Company_Company_MAX;
  static const int Company_ARRAYSIZE =
    LogEntry_Company_Company_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Company_descriptor() {
    return LogEntry_Company_descriptor();
  }
  static inline const ::std::string& Company_Name(Company value) {
    return LogEntry_Company_Name(value);
  }
  static inline bool Company_Parse(const ::std::string& name,
      Company* value) {
    return LogEntry_Company_Parse(name, value);
  }

  typedef LogEntry_OperatorType OperatorType;
  static const OperatorType OPERATORTYPE_DEFAULT =
    LogEntry_OperatorType_OPERATORTYPE_DEFAULT;
  static const OperatorType UNICOM =
    LogEntry_OperatorType_UNICOM;
  static const OperatorType TELECOM =
    LogEntry_OperatorType_TELECOM;
  static const OperatorType MOBILE =
    LogEntry_OperatorType_MOBILE;
  static const OperatorType OPERATOR_UNKNOW =
    LogEntry_OperatorType_OPERATOR_UNKNOW;
  static inline bool OperatorType_IsValid(int value) {
    return LogEntry_OperatorType_IsValid(value);
  }
  static const OperatorType OperatorType_MIN =
    LogEntry_OperatorType_OperatorType_MIN;
  static const OperatorType OperatorType_MAX =
    LogEntry_OperatorType_OperatorType_MAX;
  static const int OperatorType_ARRAYSIZE =
    LogEntry_OperatorType_OperatorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperatorType_descriptor() {
    return LogEntry_OperatorType_descriptor();
  }
  static inline const ::std::string& OperatorType_Name(OperatorType value) {
    return LogEntry_OperatorType_Name(value);
  }
  static inline bool OperatorType_Parse(const ::std::string& name,
      OperatorType* value) {
    return LogEntry_OperatorType_Parse(name, value);
  }

  typedef LogEntry_LessonType LessonType;
  static const LessonType LESSONTYPE_DEFAULT =
    LogEntry_LessonType_LESSONTYPE_DEFAULT;
  static const LessonType AUDITION =
    LogEntry_LessonType_AUDITION;
  static const LessonType ORDER =
    LogEntry_LessonType_ORDER;
  static const LessonType AUDITION_U =
    LogEntry_LessonType_AUDITION_U;
  static const LessonType AUDITION_N =
    LogEntry_LessonType_AUDITION_N;
  static inline bool LessonType_IsValid(int value) {
    return LogEntry_LessonType_IsValid(value);
  }
  static const LessonType LessonType_MIN =
    LogEntry_LessonType_LessonType_MIN;
  static const LessonType LessonType_MAX =
    LogEntry_LessonType_LessonType_MAX;
  static const int LessonType_ARRAYSIZE =
    LogEntry_LessonType_LessonType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LessonType_descriptor() {
    return LogEntry_LessonType_descriptor();
  }
  static inline const ::std::string& LessonType_Name(LessonType value) {
    return LogEntry_LessonType_Name(value);
  }
  static inline bool LessonType_Parse(const ::std::string& name,
      LessonType* value) {
    return LogEntry_LessonType_Parse(name, value);
  }

  typedef LogEntry_SDKVersion SDKVersion;
  static const SDKVersion SDKVERSION_DEFAULT =
    LogEntry_SDKVersion_SDKVERSION_DEFAULT;
  static const SDKVersion V100 =
    LogEntry_SDKVersion_V100;
  static const SDKVersion V101 =
    LogEntry_SDKVersion_V101;
  static const SDKVersion V102 =
    LogEntry_SDKVersion_V102;
  static const SDKVersion V103 =
    LogEntry_SDKVersion_V103;
  static const SDKVersion V104 =
    LogEntry_SDKVersion_V104;
  static const SDKVersion V105 =
    LogEntry_SDKVersion_V105;
  static const SDKVersion V106 =
    LogEntry_SDKVersion_V106;
  static const SDKVersion V107 =
    LogEntry_SDKVersion_V107;
  static const SDKVersion V108 =
    LogEntry_SDKVersion_V108;
  static const SDKVersion V109 =
    LogEntry_SDKVersion_V109;
  static const SDKVersion V110 =
    LogEntry_SDKVersion_V110;
  static const SDKVersion V111 =
    LogEntry_SDKVersion_V111;
  static const SDKVersion V112 =
    LogEntry_SDKVersion_V112;
  static const SDKVersion V113 =
    LogEntry_SDKVersion_V113;
  static const SDKVersion V114 =
    LogEntry_SDKVersion_V114;
  static const SDKVersion V115 =
    LogEntry_SDKVersion_V115;
  static const SDKVersion V116 =
    LogEntry_SDKVersion_V116;
  static const SDKVersion V117 =
    LogEntry_SDKVersion_V117;
  static const SDKVersion V118 =
    LogEntry_SDKVersion_V118;
  static const SDKVersion V119 =
    LogEntry_SDKVersion_V119;
  static const SDKVersion V120 =
    LogEntry_SDKVersion_V120;
  static const SDKVersion V121 =
    LogEntry_SDKVersion_V121;
  static const SDKVersion V122 =
    LogEntry_SDKVersion_V122;
  static const SDKVersion V123 =
    LogEntry_SDKVersion_V123;
  static const SDKVersion V124 =
    LogEntry_SDKVersion_V124;
  static const SDKVersion V125 =
    LogEntry_SDKVersion_V125;
  static const SDKVersion V126 =
    LogEntry_SDKVersion_V126;
  static const SDKVersion V127 =
    LogEntry_SDKVersion_V127;
  static const SDKVersion V128 =
    LogEntry_SDKVersion_V128;
  static const SDKVersion V129 =
    LogEntry_SDKVersion_V129;
  static const SDKVersion V130 =
    LogEntry_SDKVersion_V130;
  static inline bool SDKVersion_IsValid(int value) {
    return LogEntry_SDKVersion_IsValid(value);
  }
  static const SDKVersion SDKVersion_MIN =
    LogEntry_SDKVersion_SDKVersion_MIN;
  static const SDKVersion SDKVersion_MAX =
    LogEntry_SDKVersion_SDKVersion_MAX;
  static const int SDKVersion_ARRAYSIZE =
    LogEntry_SDKVersion_SDKVersion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SDKVersion_descriptor() {
    return LogEntry_SDKVersion_descriptor();
  }
  static inline const ::std::string& SDKVersion_Name(SDKVersion value) {
    return LogEntry_SDKVersion_Name(value);
  }
  static inline bool SDKVersion_Parse(const ::std::string& name,
      SDKVersion* value) {
    return LogEntry_SDKVersion_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .LogEntry.ExtraInfo extraInfo = 3;
  int extrainfo_size() const;
  void clear_extrainfo();
  static const int kExtraInfoFieldNumber = 3;
  ::LogEntry_ExtraInfo* mutable_extrainfo(int index);
  ::google::protobuf::RepeatedPtrField< ::LogEntry_ExtraInfo >*
      mutable_extrainfo();
  const ::LogEntry_ExtraInfo& extrainfo(int index) const;
  ::LogEntry_ExtraInfo* add_extrainfo();
  const ::google::protobuf::RepeatedPtrField< ::LogEntry_ExtraInfo >&
      extrainfo() const;

  // .LogEntry.BaseInfo baseInfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 1;
  const ::LogEntry_BaseInfo& baseinfo() const;
  ::LogEntry_BaseInfo* release_baseinfo();
  ::LogEntry_BaseInfo* mutable_baseinfo();
  void set_allocated_baseinfo(::LogEntry_BaseInfo* baseinfo);

  // .LogEntry.LiveInfo liveInfo = 2;
  bool has_liveinfo() const;
  void clear_liveinfo();
  static const int kLiveInfoFieldNumber = 2;
  const ::LogEntry_LiveInfo& liveinfo() const;
  ::LogEntry_LiveInfo* release_liveinfo();
  ::LogEntry_LiveInfo* mutable_liveinfo();
  void set_allocated_liveinfo(::LogEntry_LiveInfo* liveinfo);

  // @@protoc_insertion_point(class_scope:LogEntry)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::LogEntry_ExtraInfo > extrainfo_;
  ::LogEntry_BaseInfo* baseinfo_;
  ::LogEntry_LiveInfo* liveinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_galaxy_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogEntry_BaseInfo

// int64 sysTime = 1;
inline void LogEntry_BaseInfo::clear_systime() {
  systime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LogEntry_BaseInfo::systime() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.sysTime)
  return systime_;
}
inline void LogEntry_BaseInfo::set_systime(::google::protobuf::int64 value) {
  
  systime_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.sysTime)
}

// int64 time = 2;
inline void LogEntry_BaseInfo::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LogEntry_BaseInfo::time() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.time)
  return time_;
}
inline void LogEntry_BaseInfo::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.time)
}

// string sessionId = 3;
inline void LogEntry_BaseInfo::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_BaseInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.sessionId)
  return sessionid_.GetNoArena();
}
inline void LogEntry_BaseInfo::set_sessionid(const ::std::string& value) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.sessionId)
}
#if LANG_CXX11
inline void LogEntry_BaseInfo::set_sessionid(::std::string&& value) {
  
  sessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.BaseInfo.sessionId)
}
#endif
inline void LogEntry_BaseInfo::set_sessionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.BaseInfo.sessionId)
}
inline void LogEntry_BaseInfo::set_sessionid(const char* value, size_t size) {
  
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.BaseInfo.sessionId)
}
inline ::std::string* LogEntry_BaseInfo::mutable_sessionid() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.BaseInfo.sessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_BaseInfo::release_sessionid() {
  // @@protoc_insertion_point(field_release:LogEntry.BaseInfo.sessionId)
  
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_BaseInfo::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.BaseInfo.sessionId)
}

// string uuid = 4;
inline void LogEntry_BaseInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_BaseInfo::uuid() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.uuid)
  return uuid_.GetNoArena();
}
inline void LogEntry_BaseInfo::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.uuid)
}
#if LANG_CXX11
inline void LogEntry_BaseInfo::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.BaseInfo.uuid)
}
#endif
inline void LogEntry_BaseInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.BaseInfo.uuid)
}
inline void LogEntry_BaseInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.BaseInfo.uuid)
}
inline ::std::string* LogEntry_BaseInfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.BaseInfo.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_BaseInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:LogEntry.BaseInfo.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_BaseInfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.BaseInfo.uuid)
}

// .LogEntry.Company company = 5;
inline void LogEntry_BaseInfo::clear_company() {
  company_ = 0;
}
inline ::LogEntry_Company LogEntry_BaseInfo::company() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.company)
  return static_cast< ::LogEntry_Company >(company_);
}
inline void LogEntry_BaseInfo::set_company(::LogEntry_Company value) {
  
  company_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.company)
}

// .LogEntry.SDKVersion sdkVersion = 6;
inline void LogEntry_BaseInfo::clear_sdkversion() {
  sdkversion_ = 0;
}
inline ::LogEntry_SDKVersion LogEntry_BaseInfo::sdkversion() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.sdkVersion)
  return static_cast< ::LogEntry_SDKVersion >(sdkversion_);
}
inline void LogEntry_BaseInfo::set_sdkversion(::LogEntry_SDKVersion value) {
  
  sdkversion_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.sdkVersion)
}

// string userId = 7;
inline void LogEntry_BaseInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_BaseInfo::userid() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.userId)
  return userid_.GetNoArena();
}
inline void LogEntry_BaseInfo::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.userId)
}
#if LANG_CXX11
inline void LogEntry_BaseInfo::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.BaseInfo.userId)
}
#endif
inline void LogEntry_BaseInfo::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.BaseInfo.userId)
}
inline void LogEntry_BaseInfo::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.BaseInfo.userId)
}
inline ::std::string* LogEntry_BaseInfo::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.BaseInfo.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_BaseInfo::release_userid() {
  // @@protoc_insertion_point(field_release:LogEntry.BaseInfo.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_BaseInfo::set_allocated_userid(::std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.BaseInfo.userId)
}

// .LogEntry.UserType userType = 8;
inline void LogEntry_BaseInfo::clear_usertype() {
  usertype_ = 0;
}
inline ::LogEntry_UserType LogEntry_BaseInfo::usertype() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.userType)
  return static_cast< ::LogEntry_UserType >(usertype_);
}
inline void LogEntry_BaseInfo::set_usertype(::LogEntry_UserType value) {
  
  usertype_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.userType)
}

// .LogEntry.LogType type = 9;
inline void LogEntry_BaseInfo::clear_type() {
  type_ = 0;
}
inline ::LogEntry_LogType LogEntry_BaseInfo::type() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.type)
  return static_cast< ::LogEntry_LogType >(type_);
}
inline void LogEntry_BaseInfo::set_type(::LogEntry_LogType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.type)
}

// string eventId = 10;
inline void LogEntry_BaseInfo::clear_eventid() {
  eventid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_BaseInfo::eventid() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.eventId)
  return eventid_.GetNoArena();
}
inline void LogEntry_BaseInfo::set_eventid(const ::std::string& value) {
  
  eventid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.eventId)
}
#if LANG_CXX11
inline void LogEntry_BaseInfo::set_eventid(::std::string&& value) {
  
  eventid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.BaseInfo.eventId)
}
#endif
inline void LogEntry_BaseInfo::set_eventid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eventid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.BaseInfo.eventId)
}
inline void LogEntry_BaseInfo::set_eventid(const char* value, size_t size) {
  
  eventid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.BaseInfo.eventId)
}
inline ::std::string* LogEntry_BaseInfo::mutable_eventid() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.BaseInfo.eventId)
  return eventid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_BaseInfo::release_eventid() {
  // @@protoc_insertion_point(field_release:LogEntry.BaseInfo.eventId)
  
  return eventid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_BaseInfo::set_allocated_eventid(::std::string* eventid) {
  if (eventid != nullptr) {
    
  } else {
    
  }
  eventid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eventid);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.BaseInfo.eventId)
}

// .LogEntry.NetType netType = 11;
inline void LogEntry_BaseInfo::clear_nettype() {
  nettype_ = 0;
}
inline ::LogEntry_NetType LogEntry_BaseInfo::nettype() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.netType)
  return static_cast< ::LogEntry_NetType >(nettype_);
}
inline void LogEntry_BaseInfo::set_nettype(::LogEntry_NetType value) {
  
  nettype_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.netType)
}

// .LogEntry.OperatorType operatorType = 12;
inline void LogEntry_BaseInfo::clear_operatortype() {
  operatortype_ = 0;
}
inline ::LogEntry_OperatorType LogEntry_BaseInfo::operatortype() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.operatorType)
  return static_cast< ::LogEntry_OperatorType >(operatortype_);
}
inline void LogEntry_BaseInfo::set_operatortype(::LogEntry_OperatorType value) {
  
  operatortype_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.operatorType)
}

// int32 requestCnt = 13;
inline void LogEntry_BaseInfo::clear_requestcnt() {
  requestcnt_ = 0;
}
inline ::google::protobuf::int32 LogEntry_BaseInfo::requestcnt() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.requestCnt)
  return requestcnt_;
}
inline void LogEntry_BaseInfo::set_requestcnt(::google::protobuf::int32 value) {
  
  requestcnt_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.requestCnt)
}

// string business = 14;
inline void LogEntry_BaseInfo::clear_business() {
  business_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_BaseInfo::business() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.business)
  return business_.GetNoArena();
}
inline void LogEntry_BaseInfo::set_business(const ::std::string& value) {
  
  business_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.business)
}
#if LANG_CXX11
inline void LogEntry_BaseInfo::set_business(::std::string&& value) {
  
  business_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.BaseInfo.business)
}
#endif
inline void LogEntry_BaseInfo::set_business(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  business_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.BaseInfo.business)
}
inline void LogEntry_BaseInfo::set_business(const char* value, size_t size) {
  
  business_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.BaseInfo.business)
}
inline ::std::string* LogEntry_BaseInfo::mutable_business() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.BaseInfo.business)
  return business_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_BaseInfo::release_business() {
  // @@protoc_insertion_point(field_release:LogEntry.BaseInfo.business)
  
  return business_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_BaseInfo::set_allocated_business(::std::string* business) {
  if (business != nullptr) {
    
  } else {
    
  }
  business_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), business);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.BaseInfo.business)
}

// .LogEntry.Os os = 15;
inline void LogEntry_BaseInfo::clear_os() {
  os_ = 0;
}
inline ::LogEntry_Os LogEntry_BaseInfo::os() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.os)
  return static_cast< ::LogEntry_Os >(os_);
}
inline void LogEntry_BaseInfo::set_os(::LogEntry_Os value) {
  
  os_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.os)
}

// string channel = 16;
inline void LogEntry_BaseInfo::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_BaseInfo::channel() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.channel)
  return channel_.GetNoArena();
}
inline void LogEntry_BaseInfo::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.channel)
}
#if LANG_CXX11
inline void LogEntry_BaseInfo::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.BaseInfo.channel)
}
#endif
inline void LogEntry_BaseInfo::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.BaseInfo.channel)
}
inline void LogEntry_BaseInfo::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.BaseInfo.channel)
}
inline ::std::string* LogEntry_BaseInfo::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.BaseInfo.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_BaseInfo::release_channel() {
  // @@protoc_insertion_point(field_release:LogEntry.BaseInfo.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_BaseInfo::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.BaseInfo.channel)
}

// string appVersion = 17;
inline void LogEntry_BaseInfo::clear_appversion() {
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_BaseInfo::appversion() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.appVersion)
  return appversion_.GetNoArena();
}
inline void LogEntry_BaseInfo::set_appversion(const ::std::string& value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.appVersion)
}
#if LANG_CXX11
inline void LogEntry_BaseInfo::set_appversion(::std::string&& value) {
  
  appversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.BaseInfo.appVersion)
}
#endif
inline void LogEntry_BaseInfo::set_appversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.BaseInfo.appVersion)
}
inline void LogEntry_BaseInfo::set_appversion(const char* value, size_t size) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.BaseInfo.appVersion)
}
inline ::std::string* LogEntry_BaseInfo::mutable_appversion() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.BaseInfo.appVersion)
  return appversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_BaseInfo::release_appversion() {
  // @@protoc_insertion_point(field_release:LogEntry.BaseInfo.appVersion)
  
  return appversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_BaseInfo::set_allocated_appversion(::std::string* appversion) {
  if (appversion != nullptr) {
    
  } else {
    
  }
  appversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appversion);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.BaseInfo.appVersion)
}

// string appType = 18;
inline void LogEntry_BaseInfo::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_BaseInfo::apptype() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.appType)
  return apptype_.GetNoArena();
}
inline void LogEntry_BaseInfo::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.appType)
}
#if LANG_CXX11
inline void LogEntry_BaseInfo::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.BaseInfo.appType)
}
#endif
inline void LogEntry_BaseInfo::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.BaseInfo.appType)
}
inline void LogEntry_BaseInfo::set_apptype(const char* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.BaseInfo.appType)
}
inline ::std::string* LogEntry_BaseInfo::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.BaseInfo.appType)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_BaseInfo::release_apptype() {
  // @@protoc_insertion_point(field_release:LogEntry.BaseInfo.appType)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_BaseInfo::set_allocated_apptype(::std::string* apptype) {
  if (apptype != nullptr) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.BaseInfo.appType)
}

// string deviceInfo = 19;
inline void LogEntry_BaseInfo::clear_deviceinfo() {
  deviceinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_BaseInfo::deviceinfo() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.deviceInfo)
  return deviceinfo_.GetNoArena();
}
inline void LogEntry_BaseInfo::set_deviceinfo(const ::std::string& value) {
  
  deviceinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.deviceInfo)
}
#if LANG_CXX11
inline void LogEntry_BaseInfo::set_deviceinfo(::std::string&& value) {
  
  deviceinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.BaseInfo.deviceInfo)
}
#endif
inline void LogEntry_BaseInfo::set_deviceinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.BaseInfo.deviceInfo)
}
inline void LogEntry_BaseInfo::set_deviceinfo(const char* value, size_t size) {
  
  deviceinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.BaseInfo.deviceInfo)
}
inline ::std::string* LogEntry_BaseInfo::mutable_deviceinfo() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.BaseInfo.deviceInfo)
  return deviceinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_BaseInfo::release_deviceinfo() {
  // @@protoc_insertion_point(field_release:LogEntry.BaseInfo.deviceInfo)
  
  return deviceinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_BaseInfo::set_allocated_deviceinfo(::std::string* deviceinfo) {
  if (deviceinfo != nullptr) {
    
  } else {
    
  }
  deviceinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceinfo);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.BaseInfo.deviceInfo)
}

// string osVersion = 20;
inline void LogEntry_BaseInfo::clear_osversion() {
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_BaseInfo::osversion() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.osVersion)
  return osversion_.GetNoArena();
}
inline void LogEntry_BaseInfo::set_osversion(const ::std::string& value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.osVersion)
}
#if LANG_CXX11
inline void LogEntry_BaseInfo::set_osversion(::std::string&& value) {
  
  osversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.BaseInfo.osVersion)
}
#endif
inline void LogEntry_BaseInfo::set_osversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.BaseInfo.osVersion)
}
inline void LogEntry_BaseInfo::set_osversion(const char* value, size_t size) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.BaseInfo.osVersion)
}
inline ::std::string* LogEntry_BaseInfo::mutable_osversion() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.BaseInfo.osVersion)
  return osversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_BaseInfo::release_osversion() {
  // @@protoc_insertion_point(field_release:LogEntry.BaseInfo.osVersion)
  
  return osversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_BaseInfo::set_allocated_osversion(::std::string* osversion) {
  if (osversion != nullptr) {
    
  } else {
    
  }
  osversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osversion);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.BaseInfo.osVersion)
}

// .LogEntry.AppAction appAction = 21;
inline void LogEntry_BaseInfo::clear_appaction() {
  appaction_ = 0;
}
inline ::LogEntry_AppAction LogEntry_BaseInfo::appaction() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.appAction)
  return static_cast< ::LogEntry_AppAction >(appaction_);
}
inline void LogEntry_BaseInfo::set_appaction(::LogEntry_AppAction value) {
  
  appaction_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.appAction)
}

// string info = 22;
inline void LogEntry_BaseInfo::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_BaseInfo::info() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.info)
  return info_.GetNoArena();
}
inline void LogEntry_BaseInfo::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.info)
}
#if LANG_CXX11
inline void LogEntry_BaseInfo::set_info(::std::string&& value) {
  
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.BaseInfo.info)
}
#endif
inline void LogEntry_BaseInfo::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.BaseInfo.info)
}
inline void LogEntry_BaseInfo::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.BaseInfo.info)
}
inline ::std::string* LogEntry_BaseInfo::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.BaseInfo.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_BaseInfo::release_info() {
  // @@protoc_insertion_point(field_release:LogEntry.BaseInfo.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_BaseInfo::set_allocated_info(::std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.BaseInfo.info)
}

// int64 stayTime = 23;
inline void LogEntry_BaseInfo::clear_staytime() {
  staytime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LogEntry_BaseInfo::staytime() const {
  // @@protoc_insertion_point(field_get:LogEntry.BaseInfo.stayTime)
  return staytime_;
}
inline void LogEntry_BaseInfo::set_staytime(::google::protobuf::int64 value) {
  
  staytime_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.BaseInfo.stayTime)
}

// -------------------------------------------------------------------

// LogEntry_LiveInfo

// string lessonId = 1;
inline void LogEntry_LiveInfo::clear_lessonid() {
  lessonid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_LiveInfo::lessonid() const {
  // @@protoc_insertion_point(field_get:LogEntry.LiveInfo.lessonId)
  return lessonid_.GetNoArena();
}
inline void LogEntry_LiveInfo::set_lessonid(const ::std::string& value) {
  
  lessonid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.LiveInfo.lessonId)
}
#if LANG_CXX11
inline void LogEntry_LiveInfo::set_lessonid(::std::string&& value) {
  
  lessonid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.LiveInfo.lessonId)
}
#endif
inline void LogEntry_LiveInfo::set_lessonid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lessonid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.LiveInfo.lessonId)
}
inline void LogEntry_LiveInfo::set_lessonid(const char* value, size_t size) {
  
  lessonid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.LiveInfo.lessonId)
}
inline ::std::string* LogEntry_LiveInfo::mutable_lessonid() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.LiveInfo.lessonId)
  return lessonid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_LiveInfo::release_lessonid() {
  // @@protoc_insertion_point(field_release:LogEntry.LiveInfo.lessonId)
  
  return lessonid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_LiveInfo::set_allocated_lessonid(::std::string* lessonid) {
  if (lessonid != nullptr) {
    
  } else {
    
  }
  lessonid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lessonid);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.LiveInfo.lessonId)
}

// .LogEntry.LessonType lessonType = 2;
inline void LogEntry_LiveInfo::clear_lessontype() {
  lessontype_ = 0;
}
inline ::LogEntry_LessonType LogEntry_LiveInfo::lessontype() const {
  // @@protoc_insertion_point(field_get:LogEntry.LiveInfo.lessonType)
  return static_cast< ::LogEntry_LessonType >(lessontype_);
}
inline void LogEntry_LiveInfo::set_lessontype(::LogEntry_LessonType value) {
  
  lessontype_ = value;
  // @@protoc_insertion_point(field_set:LogEntry.LiveInfo.lessonType)
}

// string serverIp = 3;
inline void LogEntry_LiveInfo::clear_serverip() {
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_LiveInfo::serverip() const {
  // @@protoc_insertion_point(field_get:LogEntry.LiveInfo.serverIp)
  return serverip_.GetNoArena();
}
inline void LogEntry_LiveInfo::set_serverip(const ::std::string& value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.LiveInfo.serverIp)
}
#if LANG_CXX11
inline void LogEntry_LiveInfo::set_serverip(::std::string&& value) {
  
  serverip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.LiveInfo.serverIp)
}
#endif
inline void LogEntry_LiveInfo::set_serverip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.LiveInfo.serverIp)
}
inline void LogEntry_LiveInfo::set_serverip(const char* value, size_t size) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.LiveInfo.serverIp)
}
inline ::std::string* LogEntry_LiveInfo::mutable_serverip() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.LiveInfo.serverIp)
  return serverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_LiveInfo::release_serverip() {
  // @@protoc_insertion_point(field_release:LogEntry.LiveInfo.serverIp)
  
  return serverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_LiveInfo::set_allocated_serverip(::std::string* serverip) {
  if (serverip != nullptr) {
    
  } else {
    
  }
  serverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverip);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.LiveInfo.serverIp)
}

// string userIp = 4;
inline void LogEntry_LiveInfo::clear_userip() {
  userip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_LiveInfo::userip() const {
  // @@protoc_insertion_point(field_get:LogEntry.LiveInfo.userIp)
  return userip_.GetNoArena();
}
inline void LogEntry_LiveInfo::set_userip(const ::std::string& value) {
  
  userip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.LiveInfo.userIp)
}
#if LANG_CXX11
inline void LogEntry_LiveInfo::set_userip(::std::string&& value) {
  
  userip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.LiveInfo.userIp)
}
#endif
inline void LogEntry_LiveInfo::set_userip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.LiveInfo.userIp)
}
inline void LogEntry_LiveInfo::set_userip(const char* value, size_t size) {
  
  userip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.LiveInfo.userIp)
}
inline ::std::string* LogEntry_LiveInfo::mutable_userip() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.LiveInfo.userIp)
  return userip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_LiveInfo::release_userip() {
  // @@protoc_insertion_point(field_release:LogEntry.LiveInfo.userIp)
  
  return userip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_LiveInfo::set_allocated_userip(::std::string* userip) {
  if (userip != nullptr) {
    
  } else {
    
  }
  userip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userip);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.LiveInfo.userIp)
}

// -------------------------------------------------------------------

// LogEntry_ExtraInfo

// string key = 1;
inline void LogEntry_ExtraInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_ExtraInfo::key() const {
  // @@protoc_insertion_point(field_get:LogEntry.ExtraInfo.key)
  return key_.GetNoArena();
}
inline void LogEntry_ExtraInfo::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.ExtraInfo.key)
}
#if LANG_CXX11
inline void LogEntry_ExtraInfo::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.ExtraInfo.key)
}
#endif
inline void LogEntry_ExtraInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.ExtraInfo.key)
}
inline void LogEntry_ExtraInfo::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.ExtraInfo.key)
}
inline ::std::string* LogEntry_ExtraInfo::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.ExtraInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_ExtraInfo::release_key() {
  // @@protoc_insertion_point(field_release:LogEntry.ExtraInfo.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_ExtraInfo::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.ExtraInfo.key)
}

// string value = 2;
inline void LogEntry_ExtraInfo::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry_ExtraInfo::value() const {
  // @@protoc_insertion_point(field_get:LogEntry.ExtraInfo.value)
  return value_.GetNoArena();
}
inline void LogEntry_ExtraInfo::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LogEntry.ExtraInfo.value)
}
#if LANG_CXX11
inline void LogEntry_ExtraInfo::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogEntry.ExtraInfo.value)
}
#endif
inline void LogEntry_ExtraInfo::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogEntry.ExtraInfo.value)
}
inline void LogEntry_ExtraInfo::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogEntry.ExtraInfo.value)
}
inline ::std::string* LogEntry_ExtraInfo::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:LogEntry.ExtraInfo.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry_ExtraInfo::release_value() {
  // @@protoc_insertion_point(field_release:LogEntry.ExtraInfo.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry_ExtraInfo::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:LogEntry.ExtraInfo.value)
}

// -------------------------------------------------------------------

// LogEntry

// .LogEntry.BaseInfo baseInfo = 1;
inline bool LogEntry::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != nullptr;
}
inline void LogEntry::clear_baseinfo() {
  if (GetArenaNoVirtual() == nullptr && baseinfo_ != nullptr) {
    delete baseinfo_;
  }
  baseinfo_ = nullptr;
}
inline const ::LogEntry_BaseInfo& LogEntry::baseinfo() const {
  const ::LogEntry_BaseInfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:LogEntry.baseInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::LogEntry_BaseInfo*>(
      &::_LogEntry_BaseInfo_default_instance_);
}
inline ::LogEntry_BaseInfo* LogEntry::release_baseinfo() {
  // @@protoc_insertion_point(field_release:LogEntry.baseInfo)
  
  ::LogEntry_BaseInfo* temp = baseinfo_;
  baseinfo_ = nullptr;
  return temp;
}
inline ::LogEntry_BaseInfo* LogEntry::mutable_baseinfo() {
  
  if (baseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::LogEntry_BaseInfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LogEntry.baseInfo)
  return baseinfo_;
}
inline void LogEntry::set_allocated_baseinfo(::LogEntry_BaseInfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:LogEntry.baseInfo)
}

// .LogEntry.LiveInfo liveInfo = 2;
inline bool LogEntry::has_liveinfo() const {
  return this != internal_default_instance() && liveinfo_ != nullptr;
}
inline void LogEntry::clear_liveinfo() {
  if (GetArenaNoVirtual() == nullptr && liveinfo_ != nullptr) {
    delete liveinfo_;
  }
  liveinfo_ = nullptr;
}
inline const ::LogEntry_LiveInfo& LogEntry::liveinfo() const {
  const ::LogEntry_LiveInfo* p = liveinfo_;
  // @@protoc_insertion_point(field_get:LogEntry.liveInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::LogEntry_LiveInfo*>(
      &::_LogEntry_LiveInfo_default_instance_);
}
inline ::LogEntry_LiveInfo* LogEntry::release_liveinfo() {
  // @@protoc_insertion_point(field_release:LogEntry.liveInfo)
  
  ::LogEntry_LiveInfo* temp = liveinfo_;
  liveinfo_ = nullptr;
  return temp;
}
inline ::LogEntry_LiveInfo* LogEntry::mutable_liveinfo() {
  
  if (liveinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::LogEntry_LiveInfo>(GetArenaNoVirtual());
    liveinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LogEntry.liveInfo)
  return liveinfo_;
}
inline void LogEntry::set_allocated_liveinfo(::LogEntry_LiveInfo* liveinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete liveinfo_;
  }
  if (liveinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      liveinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, liveinfo, submessage_arena);
    }
    
  } else {
    
  }
  liveinfo_ = liveinfo;
  // @@protoc_insertion_point(field_set_allocated:LogEntry.liveInfo)
}

// repeated .LogEntry.ExtraInfo extraInfo = 3;
inline int LogEntry::extrainfo_size() const {
  return extrainfo_.size();
}
inline void LogEntry::clear_extrainfo() {
  extrainfo_.Clear();
}
inline ::LogEntry_ExtraInfo* LogEntry::mutable_extrainfo(int index) {
  // @@protoc_insertion_point(field_mutable:LogEntry.extraInfo)
  return extrainfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::LogEntry_ExtraInfo >*
LogEntry::mutable_extrainfo() {
  // @@protoc_insertion_point(field_mutable_list:LogEntry.extraInfo)
  return &extrainfo_;
}
inline const ::LogEntry_ExtraInfo& LogEntry::extrainfo(int index) const {
  // @@protoc_insertion_point(field_get:LogEntry.extraInfo)
  return extrainfo_.Get(index);
}
inline ::LogEntry_ExtraInfo* LogEntry::add_extrainfo() {
  // @@protoc_insertion_point(field_add:LogEntry.extraInfo)
  return extrainfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LogEntry_ExtraInfo >&
LogEntry::extrainfo() const {
  // @@protoc_insertion_point(field_list:LogEntry.extraInfo)
  return extrainfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LogEntry_Os> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogEntry_Os>() {
  return ::LogEntry_Os_descriptor();
}
template <> struct is_proto_enum< ::LogEntry_UserType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogEntry_UserType>() {
  return ::LogEntry_UserType_descriptor();
}
template <> struct is_proto_enum< ::LogEntry_LogType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogEntry_LogType>() {
  return ::LogEntry_LogType_descriptor();
}
template <> struct is_proto_enum< ::LogEntry_NetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogEntry_NetType>() {
  return ::LogEntry_NetType_descriptor();
}
template <> struct is_proto_enum< ::LogEntry_AppAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogEntry_AppAction>() {
  return ::LogEntry_AppAction_descriptor();
}
template <> struct is_proto_enum< ::LogEntry_Company> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogEntry_Company>() {
  return ::LogEntry_Company_descriptor();
}
template <> struct is_proto_enum< ::LogEntry_OperatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogEntry_OperatorType>() {
  return ::LogEntry_OperatorType_descriptor();
}
template <> struct is_proto_enum< ::LogEntry_LessonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogEntry_LessonType>() {
  return ::LogEntry_LessonType_descriptor();
}
template <> struct is_proto_enum< ::LogEntry_SDKVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogEntry_SDKVersion>() {
  return ::LogEntry_SDKVersion_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_galaxy_5fmessage_2eproto
