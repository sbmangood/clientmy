#ifndef TRAILBOARD_H
#define TRAILBOARD_H


#include <QQmlApplicationEngine>
#include <QtQuick>
#include <QDebug>
#include <QMutex>
#include <QCursor>
#include <QPainterPath>
#include <QPolygon>
#include <QRegion>
#include <qDebug>
#include <QPainter>
#include <QQuickPaintedItem>
#include <QTimer>
#include <QQuickItem>
#include <QNetworkReply>
#include <QNetworkAccessManager>
#include <QTransform>
#include <QProcess>
#include "../datahandl/sockethandler.h"
#include "../datahandl/messagemodel.h"

#include "../datahandl/datamodel.h"
#if 1

class TrailBoard : public QQuickPaintedItem
{
    Q_OBJECT
public:

    //  TrailBoard();
    explicit TrailBoard(QQuickPaintedItem *parent = 0);
    //    virtual ~TrailBoard();

    //设置画笔颜色
    Q_INVOKABLE void setPenColor(int pencolors);
    //改变画笔尺寸
    Q_INVOKABLE void changeBrushSize(double size);

    //设置鼠标类型
    Q_INVOKABLE void setCursorShapeTypes(int types);
    //回撤
    Q_INVOKABLE void undo();

    //增加一页
    Q_INVOKABLE void addPage();

    //删除一页
    Q_INVOKABLE void deletePage();

    //跳转某一页
    Q_INVOKABLE void goPage(int pageIndex);

    //画几何图形
    Q_INVOKABLE void drawLocalGraphic(QString cmd);

    //上传图片成功后发送额指令
    Q_INVOKABLE void upLoadSendUrlHttp(QString https);

    //设置图片的比例系数
    Q_INVOKABLE void setPictureRate(double widthRate , double heightRate);

    //设置表情的url
    Q_INVOKABLE void setInterfaceUrls(QString urls);

    //开始上课
    Q_INVOKABLE  void startClassBegin();

    //处理翻页请求
    Q_INVOKABLE void handlePageRequest(bool requests);

    //学生离开教室老师离开教室
    Q_INVOKABLE void leaveClassroom();
    //主动断开
    Q_INVOKABLE void disconnectSocket(bool autoReconnect);//断开连接

    //处理学生离开教室请求
    Q_INVOKABLE  void handlLeaveClassroom(bool leaves);

    //处理b学生进入教室请求
    Q_INVOKABLE  void handlEnterClassroom(bool enters);

    //临时退出
    Q_INVOKABLE void temporaryExitWidget();

    //家庭作业
    Q_INVOKABLE void sendTopicContent(QString tags, QString names, bool status);

    //处理可见信息
    Q_INVOKABLE void handlCoursewareNameInfor(QString contents);

    //设置音频的播放
    Q_INVOKABLE void  setVideoStream(QString types ,QString staues,QString times ,QString address);

    //设置发送的内容
    Q_INVOKABLE void  setSendStudentId(QString contents);

    //直接发送信息
    Q_INVOKABLE void  directSendInformation(QString contents);

    //主动断开连接
    Q_INVOKABLE void  disconnectSocket();

    //主动退出教室
    Q_INVOKABLE void selectWidgetType(int types);

    //设发送评价
    Q_INVOKABLE  void setSendTopicContent( bool status1 ,  bool status2 ,  bool status3 , QString tags );
    //设置申请翻页
    Q_INVOKABLE void setApplyPage();

    //控制本地摄像头
    Q_INVOKABLE void setOperationVideoOrAudio(QString userId ,  QString videos ,  QString audios);

    //控制学生端打开摄像头
    Q_INVOKABLE void setOpenSutdentVideo(QString videoType);

    //ip切换
    Q_INVOKABLE  void setChangeOldIpToNew();

    //发送延迟信息
    Q_INVOKABLE void setSigSendIpLostDelay(QString infor);

    //用户授权
    Q_INVOKABLE void setUserAuth(QString userId,QString authStatus);

protected:
    //画图
    void paint(QPainter *painter);

    void mousePressEvent(QMouseEvent *event);
    void mouseMoveEvent(QMouseEvent *event);
    void mouseReleaseEvent(QMouseEvent *event);



signals:
    void sigChangeCurrentPage(int currentPage); //设置当前的页
    void sigChangeTotalPage(int totalPage); //设置全部当前的总页数
    void sigSendUrl(QString urls ,double width , double height);
    void sigDroppedRoomIds(QString ids); //掉线
    void sigSendUserId(QString userId);//传递Id用做读取数据
    void sigToolWidgetHide();//底下工具栏隐藏
    void sigToolWidgetShow();//底下工具栏显示

    // void sigCursorPointer(bool statues , int pointx , int pointy);//发送教鞭位置跟状态
    void sigSendHttpUrl(QString urls);

    //提示窗口
    void sigPromptInterface(QString interfaces);
    void sigStartClassTimeData(QString times);

    //关闭教室
    void sigCloseAllWidgets();


    //上传成功返回
    void sigEndWidget();

    void sigSendDocIDPageNo(QString contents);

    void updateFileurlCOntent();

    //鼠标按压
    void sigMousePress();
    //退出教室的id
    void sigExitRoomIds(QString ids);

    //教鞭坐标
    void sigPointerPosition(double xPoint ,double yPoint);
    //关闭摄像头操作
    void  sigUserIdCameraMicrophone(QString usrid , QString camera ,  QString microphone);

    //视频控制
    void sigVideoAudioUrl( QString avType,QString startTime ,QString controlType ,QString avUrl );

    //删除分页判断是否为分页信号
    void sigIsCourseWare();

    //集中画布
    void sigFocusTrailboard();
public slots:
    void changeOperateStatus(int status);
    void changePenColor(QColor color);
    void drawPage(MessageModel model);//画一页
    void drawRemoteLine(QString command);//画一条命令

    void openPolygonPanel(int points);
    void openEllipsePanel();
    void changeEraserSize(double size);

    //操作权限
    void onSigAuthtrail(QMap<QString, QString> contents);

    void clearScreen();


    //教鞭位置
    void  onSigPointerPosition(double xpoint ,double  ypoint);
    //隐藏教鞭
    void onPointerTimerout();

    void sigCursorPointer();
    //界面尺寸变化
    void onCtentsSizeChanged();

    //同步信息
    void onSigEnterOrSync(int  sync );

    //关闭摄像头操作
    void  onSigUserIdCameraMicrophone(QString usrid , QString camera ,  QString microphone);


    void onHttpFinished();

    void onSigSendUrl(QString urls ,double width , double height);
    void onSigSendDocIDPageNo(QString docs );

    //上传评价成功
    void onFinishedReply(QNetworkReply* reply);

    //处理结束课程
    void onStudentEndClass( QString usrid);

public :



private:
    //解析轨迹命令
    void parseTrail(QString command);
    //本地鼠标移动两点画线
    void drawLocalLine();
    //画椭圆
    void drawEllipse(const QRectF &rect,double brushWidth,QColor color,double angle);
    //根据多个点画线
    void drawLine(const QVector<QPointF> &points,double brushWidth,QColor color,int type);
    //绘制贝塞尔曲线
    void drawBezier(const QVector<QPointF> &points,double size,QColor penColor,int type);
    void sendTrailMsg(const QVector<QPointF> &points);
    //设置鼠标形状
    void setCursorShape();



public:
    //    SocketHandler * handler;
    bool m_isloadImage;




private:
    QPointF m_lastPoint;
    QPointF m_currentPoint;

    QMutex m_tempTrailMutex;
    QPixmap m_tempTrail;

    QColor m_penColor;
    int m_operateStatus; //0教鞭 1轨迹 2橡皮
    QVector<QPointF> m_currentTrail;//当前正在书写的轨迹坐标点集合
    double m_brushSize;//画笔大小
    double m_eraserSize;//橡皮大小
    // QSize boardSize; //画布大小
    int m_pointCount;

    SocketHandler * m_handler;


    QTimer  * m_pointerTimer;//教鞭隐藏时间

    QMap<QString, QString> m_userBrushPermissions;//操作权限


    QPoint m_init;
    int m_cursorShape;


    double m_pictureWidthRate;
    double m_pictureHeihtRate;


    QNetworkAccessManager  * m_httpAccessmanger;//评价信息
    //QPixmap tempTrail;

};
#endif



#endif // TRAILBOARD_H
